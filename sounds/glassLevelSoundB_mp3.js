/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;