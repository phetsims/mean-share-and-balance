/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+3LEbgPALAIABgAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;