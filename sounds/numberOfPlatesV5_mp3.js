/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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pU9F3yY/KrNo+C9lasHTKMELUpSPo7aeHwq4QpB7mD0aSPNM1J1ZEq2rqjeVhjXM1Fm0antxSO5ynvyVhcpmvm8+US6rmvFUqtNPqSjfKEGIqfa+VPRiYN3Hi8Z7u8M+0+Mnape2m1MZtFM28rs8ws7mlY7p07WnGyipoubluauTEuSmAgmDVp0gz0t03RYf4VSrVlNSpKyweH7iVYz39Dv/+3LE/4AR6aMNgwzaIrhBoHBkmvguRpeMeFDfUcEOylrD/ysXEhbALMsLtBUeBWVSVrAcrhAsJeeW1mZLqZQwT7E8VsilVtqhamRroJJHSqhohLJWwzS8M1se0gl9MeBANjjNLUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUlRFOENqptpc4tRJyKjoSLUk6Lb+SE4SLUSbZ9abCRziQzk15UFKjaqITUtEkXGa80+U9Gwk81ptkSkiMa//lrRp+0teaROtI1RItVURLzWdRI2M//7f/7cMTzABNqDQMBDMAB1y+hZDEPQKRNQCjUCT5WU+blS2ei4Snu8nHoki1V618p5rK2afzRx6iRaknZrROtEpZto+vLJG2i2vLbOzFOicsiWqv5ajdIslOVpro0lyxVTEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEvQPT6f7vowzWSAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;