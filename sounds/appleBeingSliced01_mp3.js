/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEbgPAOAIADAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;