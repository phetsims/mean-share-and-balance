/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEgQPE8AMToIRAMAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;