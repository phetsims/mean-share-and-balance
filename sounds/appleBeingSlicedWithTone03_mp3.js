/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+3LErYPQBZqNJ5ht6AAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;