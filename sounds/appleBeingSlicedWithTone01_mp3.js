/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+3LExYPWDV5sDDDLiAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;