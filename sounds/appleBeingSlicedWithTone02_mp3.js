/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEtwPSaaCDR6TJAAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;